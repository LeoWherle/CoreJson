
# output binary
BIN := corejson
LIBBIN := libcorejson.a
LIBSHAREDBIN := libcorejson.so
TEST_BIN := unit_tests

# Colors :
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[0;33m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
WHITE = \033[0;37m
NC = \033[0m


# source files
SRC = 	src/json_lexer.c \
		src/json_lexer_helper.c \
		src/json_parser_object.c \
		src/json_parser_array.c \
		src/json_parser.c \
		src/json_print.c \
		src/json_builder.c \
		src/json_free.c

SRCS =   src/main.c \
			$(SRC)

SRC_TEST = 	tests/t_lexer.c \
			tests/t_parser.c \
			tests/t_json_print.c \
			$(SRC)

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)
# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

BUILD_DIR = build

# intermediate directory for generated object files
OBJDIR := $(BUILD_DIR)/obj
# intermediate directory for generated dependency files
DEPDIR := $(BUILD_DIR)/dep

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
OBJS_TEST := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRC_TEST)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))
DEPS_TEST := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRC_TEST)))

COMMITHASH := $(shell git describe --always --abbrev=0\
 --match "NOT A TAG" --dirty="*")
DATE := $(shell date "+%d-%b-%Y %Hh:%Mm:%Ss (UTC)" --utc)
# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)
$(shell mkdir -p $(dir $(OBJS_TEST)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS_TEST)) >/dev/null)

MAKEFLAGS += --no-print-directory
# C compiler
CC := gcc
# C++ compiler
CXX := gpp
# linker
LD := gcc
# tar
TAR := tar

# C flags
CFLAGS :=  -I./include
# C++ flags	
CXXFLAGS :=
# C/C++ flags
CPPFLAGS := -Wall -Wextra -pedantic -Wwrite-strings -Winit-self -Wformat=2\
 -Wmissing-include-dirs -Wunreachable-code -Winline -Wundef\
 -Wno-missing-field-initializers -Wno-unused-parameter -Wno-unused-function\
 -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-value\
 -Wno-unused-but-set-variable -Wno-unused-result -Wno-unused-but-set-parameter\
 -Wno-unused-local-typedefs -Wno-unused-const-variable -Wno-unused-label\
 -Wno-unused-function -Wno-unused-variable -Wno-unused-parameter\
# linker flags
LDFLAGS :=
# linker flags: libraries to link (e.g. -lfoo)
LDLIBS :=
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# release build flags (make release=1 ...)
ifdef release
	CFLAGS += -O3
	CXXFLAGS += -O3
else
	CFLAGS += -g3
	CXXFLAGS += -g3
endif

ifdef native
	CFLAGS += -march=native
	CXXFLAGS += -march=native
endif

# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

.PHONY: all
all: gen_version
all: $(BIN)

.PHONY: lib
lib: gen_version
lib: $(LIBBIN)

.PHONY: lib-shared
lib-shared: gen_version
lib-shared: $(LIBSHAREDBIN)

.PHONY: dist
dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR)

.PHONY: fclean
fclean: clean tests_clean
	$(RM) $(BIN) $(DISTOUTPUT) $(LIBBIN) $(LIBSHAREDBIN)

.PHONY: re
re: fclean
re:
	@$(MAKE) all

.PHONY: tests_clean
tests_clean:
	$(RM) $(TEST_BIN) *.gcda *.gcno *.gcov

.PHONY: $(TEST_BIN)
$(TEST_BIN): LDLIBS += -lcriterion -lgcov
$(TEST_BIN): LDFLAGS += --coverage
$(TEST_BIN): $(SRC_TEST)
	@$(LD) $(LDFLAGS) $(LDLIBS) $(CFLAGS) -o $@ $^
	@echo -e "$(GREEN)linked\t$(WHITE)$<$(NC), \
	with CFLAGS: $(CYAN)$(CFLAGS)$(NC) \
	and LIB: $(YELLOW)$(LDLIBS)$(NC) \
	and LDFLAGS: $(BLUE)$(LDFLAGS)$(NC)"

.PHONY: tests_run
tests_run: $(TEST_BIN)
tests_run:
	-./$(TEST_BIN)

$(BIN): $(OBJS)
	@$(LD) $(LDFLAGS) $(LDLIBS) -o $@ $^
	@echo -e "$(GREEN)linked\t$(WHITE)$<$(NC), \
	with CFLAGS: $(CYAN)$(CFLAGS)$(NC) \
	and LIB: $(YELLOW)$(LDLIBS)$(NC) \
	and LDFLAGS: $(BLUE)$(LDFLAGS)$(NC)"


$(LIBBIN): $(OBJS)
	ar rcs $(LIBBIN) $^

$(LIBSHAREDBIN): CFLAGS += -fPIC
$(LIBSHAREDBIN): LDFLAGS += -shared
$(LIBSHAREDBIN): $(OBJS)
	@$(LD) $(LDFLAGS) $(LDLIBS) -o $@ $^
	@echo -e "$(GREEN)linked\t$(WHITE)$<$(NC), \
	with CFLAGS: $(CYAN)$(CFLAGS)$(NC) \
	and LIB: $(YELLOW)$(LDLIBS)$(NC) \
	and LDFLAGS: $(BLUE)$(LDFLAGS)$(NC)"


.PHONY: gen_version
gen_version:
	@echo "#ifndef VERSION_H" > include/version.h
	@echo "    #define VERSION_H" >> include/version.h
	@echo "    #define VERSION_GIT  \"$(COMMITHASH)\"" >> include/version.h
	@echo "    #define VERSION_DATE \"$(DATE)\"" >> include/version.h
	@echo "#endif /* VERSION_H */" >> include/version.h

$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	@$(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<
	@echo -e "$(GREEN)built\t$(WHITE)$<$(NC)"
	@$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cc
$(OBJDIR)/%.o: %.cc $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cxx
$(OBJDIR)/%.o: %.cxx $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
	$(POSTCOMPILE)

.PRECIOUS: $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
